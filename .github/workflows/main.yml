# Nom du workflow
name: CI/CD Workflow Server

# Variable d'environnement globales utilisées dans le workflow
env:
    SERVER_USER: 'root' # Utilisateur du serveur
    SERVER_IP: '46.105.92.55' # Adresse IP du serveur

# Paramètres pour gérer la concurrence des jobs
concurrency:
    # Groupe de concurrence basé sur le nom du workflow et la référence git
    group: ${{ github.workflow }}-${{ github.ref }}
    # Annule les jobs en cours si un nouveau job est lancé dans le même groupe
    cancel-in-progress: true

# Evènement déclenchant le workflow
on:
    push: # Déclencher lors d'un push
        branches: # Sur la branche spécifiée
            - main # Branche main

# Description des jobs à exécuter
jobs:
    # Job pour les tests
    check-tests-backend:
        runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
        defaults: # Options par défaut pour les étapes
            run:
                working-directory: server # Dossier de travail par défaut
        steps:
            - name: Récupération du code source
              uses: actions/checkout@v4 # Utilise l'action checkout

            - name: Installation de NodeJS
              uses: actions/setup-node@v3 # Utilise l'action setup-node
              with: # Options supplémentaires
                  cache: 'npm' # Met en cache les dépendances npm
                  cache-dependency-path: server/package-lock.json # Chemin du fichier package-lock.json

            - name: Installation des dépendances
              run: npm ci # Installation des dépendances en mode "clean install"
              # run: npm ci --prefer-offline

            - name: Vérification du code
              run: npm run lint # Exécute le script de lint

            - name: Vérification des vulnérabilités des dépendances
              run: npm audit # Utilise npm audit pour identifier les vulnérabilités

            - name: Exécution des tests
              run: npm run test:ci # Exécute le script de test

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v3
              env:
                  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    # Job pour le frontend
    check-frontend:
        runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
        defaults: # Options par défaut pour les étapes
            run:
                working-directory: client # Dossier de travail par défaut
        steps:
            - name: Récupération du code source
              uses: actions/checkout@v4 # Utilise l'action checkout

            - name: Installation de NodeJS
              uses: actions/setup-node@v3 # Utilise l'action setup-node
              with: # Options supplémentaires
                  cache: 'npm' # Met en cache les dépendances npm
                  cache-dependency-path: client/package-lock.json # Chemin du fichier package-lock.json

            - name: Installation des dépendances
              run: npm ci # Installation des dépendances en mode "clean install"
              # run: npm ci --prefer-offline

            - name: Vérification du code
              run: npm run lint # Exécute le script de lint

            - name: Vérification des vulnérabilités des dépendances
              run: npm audit # Utilise npm audit pour identifier les vulnérabilités

    # Job pour les tests
    build-frontend:
        needs: check-frontend
        runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
        defaults: # Options par défaut pour les étapes
            run:
                working-directory: client # Dossier de travail par défaut
        steps:
            - name: Récupération du code source
              uses: actions/checkout@v4 # Utilise l'action checkout

            - name: Installation de NodeJS
              uses: actions/setup-node@v3 # Utilise l'action setup-node
              with: # Options supplémentaires
                  cache: 'npm' # Met en cache les dépendances npm
                  cache-dependency-path: client/package-lock.json # Chemin du fichier package-lock.json

            - name: Installation des dépendances
              run: npm ci # Installation des dépendances en mode "clean install"
              # run: npm ci --prefer-offline

            - name: Construction de l'application
              run: npm run build # Exécute le script de build

            - name: Upload build de l'artefact
              uses: actions/upload-artifact@v3
              with:
                  name: build
                  path: ./client/dist

    # Job pour le déploiement
    deploy:
        needs:
            - check-tests-backend # Dépend du job "tests"
            - build-frontend
        runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
        steps:
            - name: Récupération du code source
              uses: actions/checkout@v4 # Utilise l'action de checkout

            - name: Téléchargement de l'artefacte lié au build
              uses: actions/download-artifact@v3
              with:
                  name: build
                  path: ./dist

            - name: Déploiement sur le client
              run: | # Commandes shell à exécuter




                  eval $(ssh-agent -s) # Initialisation de l'agent SSH
                  ssh-add - <<< "${{ secrets.SSH_KEY_VPS }}" # Ajoute la clé SSH privée
                  mkdir -p ~/.ssh # Créé le dossier .ssh si nécessaire
                  ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts # Ajoute le serveur aux hôtes connus
                  scp -r ./server $SERVER_USER@$SERVER_IP:/var/www # Copie le code sur le serveur
                  scp -r ./dist $SERVER_USER@$SERVER_IP:/var/www
                  ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && npm install --omit=dev" # Installe les dépendances sur le serveur
                  ssh $SERVER_USER@$SERVER_IP "cd /var/www/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save" # Démarrer ou redémarre le service avec PM2
